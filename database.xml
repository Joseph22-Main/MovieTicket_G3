using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq; // Required for working with XML
using System.Globalization; // Required for parsing decimals correctly

// =================================================================================
// DATA MODELS (No changes here)
// =================================================================================
public class Movie
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Genre { get; set; }
    public int DurationMinutes { get; set; }
    public decimal TicketPrice { get; set; }
}

public class Snack
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}

public class AdminUser
{
    public int Id { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
}

public class LoginRecord
{
    public int Id { get; set; }
    public string Username { get; set; }
    public DateTime LoginTime { get; set; }
}

public class Ticket
{
    public int Id { get; set; }
    public int MovieId { get; set; }
    public List<string> Seats { get; set; } = new List<string>();
    public List<Snack> PurchasedSnacks { get; set; } = new List<Snack>();
    public decimal TotalCost { get; set; }
    public DateTime PurchaseTime { get; set; }
}

// =================================================================================
// DATABASE MANAGER (NEW CLASS)
// This class handles all reading from and writing to the database.xml file.
// =================================================================================
public static class DatabaseManager
{
    private const string FilePath = "database.xml";

    /// <summary>
    /// Loads all data from the database.xml file into the application's memory.
    /// </summary>
    public static void LoadData()
    {
        try
        {
            XDocument doc = XDocument.Load(FilePath);
            TicketingSystem.Users = doc.Descendants("AdminUser").Select(u => new AdminUser
            {
                Id = (int)u.Element("Id"),
                Username = (string)u.Element("Username"),
                Password = (string)u.Element("Password")
            }).ToList();

            TicketingSystem.Movies = doc.Descendants("Movie").Select(m => new Movie
            {
                Id = (int)m.Element("Id"),
                Title = (string)m.Element("Title"),
                Genre = (string)m.Element("Genre"),
                DurationMinutes = (int)m.Element("DurationMinutes"),
                TicketPrice = (decimal)m.Element("TicketPrice")
            }).ToList();

            TicketingSystem.Snacks = doc.Descendants("Snack").Select(s => new Snack
            {
                Id = (int)s.Element("Id"),
                Name = (string)s.Element("Name"),
                Price = (decimal)s.Element("Price")
            }).ToList();

            // Load records if they exist
            TicketingSystem.LoginRecords = doc.Descendants("LoginRecord").Select(lr => new LoginRecord
            {
                Id = (int)lr.Element("Id"),
                Username = (string)lr.Element("Username"),
                LoginTime = DateTime.Parse((string)lr.Element("LoginTime"))
            }).ToList();

            TicketingSystem.SoldTickets = doc.Descendants("Ticket").Select(t => new Ticket
            {
                Id = (int)t.Element("Id"),
                MovieId = (int)t.Element("MovieId"),
                Seats = ((string)t.Element("Seats")).Split(',').ToList(),
                TotalCost = decimal.Parse((string)t.Element("TotalCost"), CultureInfo.InvariantCulture),
                PurchaseTime = DateTime.Parse((string)t.Element("PurchaseTime"))
                // Note: Loading purchased snacks would require more complex logic
            }).ToList();

            Console.WriteLine("Database loaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading database: {ex.Message}");
            // If loading fails, initialize with empty lists
            TicketingSystem.InitializeEmpty();
        }
    }

    /// <summary>
    /// Saves all current data from the application's memory back to the database.xml file.
    /// </summary>
    public static void SaveData()
    {
        try
        {
            XDocument doc = new XDocument(
                new XElement("TicketingData",
                    new XElement("Users",
                        TicketingSystem.Users.Select(u =>
                            new XElement("AdminUser",
                                new XElement("Id", u.Id),
                                new XElement("Username", u.Username),
                                new XElement("Password", u.Password)
                            )
                        )
                    ),
                    new XElement("Movies",
                        TicketingSystem.Movies.Select(m =>
                            new XElement("Movie",
                                new XElement("Id", m.Id),
                                new XElement("Title", m.Title),
                                new XElement("Genre", m.Genre),
                                new XElement("DurationMinutes", m.DurationMinutes),
                                new XElement("TicketPrice", m.TicketPrice.ToString(CultureInfo.InvariantCulture))
                            )
                        )
                    ),
                    new XElement("Snacks",
                        TicketingSystem.Snacks.Select(s =>
                            new XElement("Snack",
                                new XElement("Id", s.Id),
                                new XElement("Name", s.Name),
                                new XElement("Price", s.Price.ToString(CultureInfo.InvariantCulture))
                            )
                        )
                    ),
                    new XElement("LoginRecords",
                        TicketingSystem.LoginRecords.Select(lr =>
                            new XElement("LoginRecord",
                                new XElement("Id", lr.Id),
                                new XElement("Username", lr.Username),
                                new XElement("LoginTime", lr.LoginTime.ToString("o")) // ISO 8601 format
                            )
                        )
                    ),
                    new XElement("SoldTickets",
                        TicketingSystem.SoldTickets.Select(t =>
                            new XElement("Ticket",
                                new XElement("Id", t.Id),
                                new XElement("MovieId", t.MovieId),
                                new XElement("Seats", string.Join(",", t.Seats)),
                                new XElement("TotalCost", t.TotalCost.ToString(CultureInfo.InvariantCulture)),
                                new XElement("PurchaseTime", t.PurchaseTime.ToString("o"))
                                // Note: Saving purchased snacks would be added here
                            )
                        )
                    )
                )
            );
            doc.Save(FilePath);
            Console.WriteLine("Database saved successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving database: {ex.Message}");
        }
    }
}


// =================================================================================
// MOCK DATABASE & SERVICES (MODIFIED)
// This class now holds the data in memory after it's loaded from XML.
// =================================================================================
public static class TicketingSystem
{
    // --- In-Memory Data Storage ---
    public static List<AdminUser> Users { get; set; }
    public static List<Movie> Movies { get; set; }
    public static List<Snack> Snacks { get; set; }
    public static List<LoginRecord> LoginRecords { get; set; }
    public static List<Ticket> SoldTickets { get; set; }

    /// <summary>
    /// Initializes the system with empty lists. Called if XML loading fails.
    /// </summary>
    public static void InitializeEmpty()
    {
        Users = new List<AdminUser>();
        Movies = new List<Movie>();
        Snacks = new List<Snack>();
        LoginRecords = new List<LoginRecord>();
        SoldTickets = new List<Ticket>();
    }
    
    // --- Feature Implementations (No changes to logic here) ---
    public static bool AdminLogin(string username, string password)
    {
        var user = Users.FirstOrDefault(u => u.Username.Equals(username, StringComparison.OrdinalIgnoreCase));
        if (user != null && user.Password == password)
        {
            LoginRecords.Add(new LoginRecord
            {
                Id = (LoginRecords.Any() ? LoginRecords.Max(lr => lr.Id) : 0) + 1,
                Username = username,
                LoginTime = DateTime.Now
            });
            Console.WriteLine("Login successful!");
            return true;
        }
        Console.WriteLine("Invalid username or password.");
        return false;
    }

    public static void ShowAdminDashboard()
    {
        Console.Clear();
        Console.WriteLine("===================================");
        Console.WriteLine("       ADMIN DASHBOARD");
        Console.WriteLine("===================================");
        Console.WriteLine("1. View Movie List");
        Console.WriteLine("2. View Snack Menu");
        Console.WriteLine("3. View Login History");
        Console.WriteLine("4. Create New Ticket Sale");
        Console.WriteLine("5. Exit and Save");
        Console.Write("\nSelect an option: ");
    }
    
    public static void DisplayMovies()
    {
        Console.WriteLine("\n--- Available Movies ---");
        foreach (var movie in Movies)
        {
            Console.WriteLine($"ID: {movie.Id} | Title: {movie.Title} | Price: {movie.TicketPrice:C}");
        }
    }
    
    public static void DisplaySnacks()
    {
        Console.WriteLine("\n--- Available Snacks ---");
        foreach (var snack in Snacks)
        {
            Console.WriteLine($"ID: {snack.Id} | Name: {snack.Name} | Price: {snack.Price:C}");
        }
    }

    public static void DisplayLoginRecords()
    {
        Console.WriteLine("\n--- Login History ---");
        if (!LoginRecords.Any())
        {
            Console.WriteLine("No login records found.");
            return;
        }
        foreach (var record in LoginRecords.OrderByDescending(lr => lr.LoginTime))
        {
            Console.WriteLine($"User: '{record.Username}' logged in at {record.LoginTime}");
        }
    }

    public static void CreateTicketSale()
    {
        Console.WriteLine("\n--- New Ticket Sale ---");
        DisplayMovies();
        Console.Write("Enter the ID of the movie for the ticket: ");
        if (!int.TryParse(Console.ReadLine(), out int movieId)) { Console.WriteLine("Invalid movie ID."); return; }
        
        var movie = Movies.FirstOrDefault(m => m.Id == movieId);
        if (movie == null) { Console.WriteLine("Movie not found."); return; }

        Console.Write("Enter seat numbers (e.g., A1,A2,B5): ");
        var seats = Console.ReadLine().Split(',').Select(s => s.Trim().ToUpper()).ToList();

        decimal movieTotal = movie.TicketPrice * seats.Count;
        decimal snacksTotal = 0;
        var purchasedSnacks = new List<Snack>();

        Console.Write("Add snacks? (y/n): ");
        if (Console.ReadLine().ToLower() == "y")
        {
            while (true)
            {
                DisplaySnacks();
                Console.Write("Enter Snack ID to add (or 'done' to finish): ");
                string snackInput = Console.ReadLine();
                if (snackInput.ToLower() == "done") break;

                if (int.TryParse(snackInput, out int snackId))
                {
                    var snack = Snacks.FirstOrDefault(s => s.Id == snackId);
                    if (snack != null)
                    {
                        purchasedSnacks.Add(snack);
                        snacksTotal += snack.Price;
                        Console.WriteLine($"Added {snack.Name}.");
                    }
                    else { Console.WriteLine("Snack not found."); }
                }
            }
        }

        var newTicket = new Ticket
        {
            Id = (SoldTickets.Any() ? SoldTickets.Max(t => t.Id) : 0) + 1,
            MovieId = movie.Id,
            Seats = seats,
            PurchasedSnacks = purchasedSnacks,
            TotalCost = movieTotal + snacksTotal,
            PurchaseTime = DateTime.Now
        };

        SoldTickets.Add(newTicket);

        Console.WriteLine("\n--- TICKET CREATED SUCCESSFULLY ---");
        Console.WriteLine($"TOTAL COST: {newTicket.TotalCost:C}");
        Console.WriteLine("-----------------------------------");
    }
}

// =================================================================================
// PROGRAM ENTRY POINT (MODIFIED)
// =================================================================================
public class Program
{
    public static void Main(string[] args)
    {
        // 1. Load data from database.xml
        DatabaseManager.LoadData();

        Console.WriteLine("Welcome to the Movie Ticketing System (Admin Console)");
        
        bool isLoggedIn = false;
        while (!isLoggedIn)
        {
            Console.Write("Enter username: ");
            string username = Console.ReadLine();
            Console.Write("Enter password: ");
            string password = Console.ReadLine();
            isLoggedIn = TicketingSystem.AdminLogin(username, password);
        }

        while (true)
        {
            TicketingSystem.ShowAdminDashboard();
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1": TicketingSystem.DisplayMovies(); break;
                case "2": TicketingSystem.DisplaySnacks(); break;
                case "3": TicketingSystem.DisplayLoginRecords(); break;
                case "4": TicketingSystem.CreateTicketSale(); break;
                case "5":
                    // 2. Save data back to database.xml before exiting
                    DatabaseManager.SaveData();
                    return;
                default:
                    Console.WriteLine("Invalid option. Please try again.");
                    break;
            }
            Console.WriteLine("\nPress any key to return to the dashboard...");
            Console.ReadKey();
        }
    }
}
